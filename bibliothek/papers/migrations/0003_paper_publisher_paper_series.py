# -*- coding: utf-8 -*-
# vim: ft=python fileencoding=utf-8 sts=4 sw=4 et:
# Generated by Django 1.11.3 on 2017-07-24 10:38
# Copyright (C) 2016-2022 J. Nathanael Philipp (jnphilipp) <nathanael@philipp.land>
#
# This file is part of bibliothek.
#
# bibliothek is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# bibliothek is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with bibliothek.  If not, see <http://www.gnu.org/licenses/>.
# Generated by Django 4.0.1 on 2022-02-22 08:40

import django.db.models.deletion

from bibtexparser.bparser import BibTexParser
from django.db import migrations, models, transaction
from django.template.defaultfilters import slugify


def fill_publisher_series(apps, schema_editor):
    Paper = apps.get_model("papers", "Paper")
    Publisher = apps.get_model("publishers", "Publisher")
    Series = apps.get_model("series", "Series")

    with transaction.atomic():
        for paper in Paper.objects.all():
            if not paper.bibtex:
                continue

            bib_database = BibTexParser(
                common_strings=True, homogenize_fields=True
            ).parse(paper.bibtex)
            entry = bib_database.entries[0]

            publisher = (
                {"name": entry["publisher"].strip()} if "publisher" in entry else None
            )
            series = {"name": entry["series"].strip()} if "series" in entry else None

            if publisher or series:
                if publisher:
                    try:
                        publisher = Publisher.objects.get(name=publisher)
                    except Publisher.DoesNotExist:
                        publisher = Publisher(name=publisher, slug=slugify(publisher))
                        publisher.save()
                        print(publisher.pk, publisher.slug)
                if series:
                    try:
                        series = Series.objects.get(name=series)
                    except Series.DoesNotExist:
                        series = Series(name=series, slug=slugify(series))
                        series.save()

                paper.publisher = publisher
                paper.series = series
                paper.save()


class Migration(migrations.Migration):

    dependencies = [
        ("series", "0001_initial"),
        ("publishers", "0001_initial"),
        ("papers", "0002_paper_doi"),
    ]

    operations = [
        migrations.AddField(
            model_name="paper",
            name="publisher",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="papers",
                to="publishers.publisher",
                verbose_name="Publisher",
            ),
        ),
        migrations.AddField(
            model_name="paper",
            name="series",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="papers",
                to="series.series",
                verbose_name="Series",
            ),
        ),
        migrations.AlterModelOptions(
            name="paper",
            options={
                "ordering": (
                    django.db.models.expressions.Func(
                        django.db.models.expressions.F("journal__name"),
                        function="LOWER",
                    ),
                    django.db.models.expressions.Func(
                        django.db.models.expressions.F("volume"), function="LOWER"
                    ),
                    django.db.models.expressions.Func(
                        django.db.models.expressions.F("series__name"), function="LOWER"
                    ),
                    django.db.models.expressions.Func(
                        django.db.models.expressions.F("title"), function="LOWER"
                    ),
                ),
                "verbose_name": "Paper",
                "verbose_name_plural": "Papers",
            },
        ),
        migrations.RunPython(fill_publisher_series),
    ]
